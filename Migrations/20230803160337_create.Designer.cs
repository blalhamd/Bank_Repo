// <auto-generated />
using System;
using BankSystem.APPDBCONTEXT;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230803160337_create")]
    partial class create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankSystem.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Account_Number");

                    b.Property<decimal>("balance")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("Balance");

                    b.Property<int>("bankId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("bankId");

                    b.HasIndex("customerId")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("BankSystem.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NumberBranches")
                        .HasColumnType("float")
                        .HasColumnName("Number_Branches");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("BankSystem.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("dateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("gmail")
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("Gmail");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("BankSystem.Entities.CustomerTransaction", b =>
                {
                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("transactionId")
                        .HasColumnType("int");

                    b.HasKey("customerId", "transactionId");

                    b.HasIndex("transactionId");

                    b.ToTable("customerTransactions");
                });

            modelBuilder.Entity("BankSystem.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime?>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("BankSystem.Entities.Account", b =>
                {
                    b.HasOne("BankSystem.Entities.Bank", "bank")
                        .WithMany("accounts")
                        .HasForeignKey("bankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BankSystem.Entities.Customer", "customer")
                        .WithOne("account")
                        .HasForeignKey("BankSystem.Entities.Account", "customerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("bank");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BankSystem.Entities.Customer", b =>
                {
                    b.HasOne("BankSystem.Entities.Bank", "bank")
                        .WithMany("customers")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("bank");
                });

            modelBuilder.Entity("BankSystem.Entities.CustomerTransaction", b =>
                {
                    b.HasOne("BankSystem.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankSystem.Entities.Transaction", "transaction")
                        .WithMany()
                        .HasForeignKey("transactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("BankSystem.Entities.Bank", b =>
                {
                    b.Navigation("accounts");

                    b.Navigation("customers");
                });

            modelBuilder.Entity("BankSystem.Entities.Customer", b =>
                {
                    b.Navigation("account");
                });
#pragma warning restore 612, 618
        }
    }
}
